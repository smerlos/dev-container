name: Build and Publish Dev Container

on:
  push:
    branches: [main, dev]
    paths:
      - '.devcontainer/**'
      - 'Dockerfile*'
      - '.github/workflows/build-devcontainer.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - '.devcontainer/**'
      - 'Dockerfile*'
      - '.github/workflows/build-devcontainer.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint code and Dockerfile before building
  lint:
    name: Lint Code and Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Super-Linter
        uses: super-linter/super-linter@v7
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_BASH: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true
          DOCKERFILE_HADOLINT_FILE_NAME: .devcontainer/Dockerfile

  # Build and push container image
  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Modern Development Container
            org.opencontainers.image.description=A modern development container with Debian 12, Oh My Zsh, Mise, and Starship
            org.opencontainers.image.vendor=smerlos
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Generate attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Generate devcontainer.json
        if: github.event_name != 'pull_request'
        run: |
          cat > devcontainer-published.json << 'EOF'
          {
            "name": "Modern Development Container",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest",
            "remoteUser": "vscode",
            "workspaceFolder": "/workspace",
            "customizations": {
              "vscode": {
                "settings": {
                  "terminal.integrated.defaultProfile.linux": "zsh",
                  "terminal.integrated.profiles.linux": {
                    "zsh": {
                      "path": "/bin/zsh",
                      "args": ["-l"]
                    }
                  }
                },
                "extensions": [
                  "ms-vscode.vscode-json",
                  "redhat.vscode-yaml",
                  "ms-vscode.vscode-typescript-next"
                ]
              }
            },
            "postCreateCommand": "setup-workspace",
            "features": {},
            "forwardPorts": [],
            "mounts": [
              "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached"
            ]
          }
          EOF

      - name: Upload devcontainer.json as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: devcontainer-config
          path: devcontainer-published.json
          retention-days: 30

  # Test the built container
  test:
    name: Test Container
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    steps:
      - name: Test container functionality
        run: |
          # Pull the built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          
          # Test basic functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }} \
            /bin/zsh -c "source ~/.zshrc && mise --version && starship --version && echo 'Container test passed!'"
